i2<-100
bw=(4/3)^(1/5)*(n^(-1/5))
#m=length(all.vars(formula))-1
mf<-model.frame(formula=formula, data=data)
mt <- attr(mf, "terms")
y <- model.response(mf, "numeric")
options(warn=-1)
x <- model.matrix(mt, mf, contrasts)
options(warn=1)
m=dim(x)[2]-1
#  x2<-matrix(as.numeric(x),ncol=m+1,nrow=n)
offset <- as.vector(model.offset(mf))
if (!is.null(offset))  {
if (length(offset) != NROW(y))
stop(gettextf("number of offsets is %d should equal %d (number of observations)",
length(offset), NROW(y)), domain = NA)
}
datae<-data.frame(matrix(0,nrow=n,ncol=2))
dataee<-datae
mu<-c(1:n)*0
#estall=matrix(0, 1, 10);
datam<-as.matrix(data)
###########################################################################################
############################################# Pnql ########################################
###########################################################################################
# Initial step: assume constant vi for all subjects
bnew<-c(1:(m+1))*0; bold<-bnew+0.1
Di<-matrix(0,nrow=n,ncol=m+1); Dp<-matrix(0,nrow=(m+1),ncol=(m+1))
Dp[row(Dp)==col(Dp)] <- 1; Dp[1:(m+1),1:(m+1)]<-0
lambda<-0.01; iter2<-1
while (max(abs(bnew-bold))>preci&iter2<i2)
{
bold<-bnew
#offset
if (!is.null(offset)){
eta<-x%*%bold+as.matrix(offset,nrow=length(offset))
}else {eta<-x%*%bold}
#link function
#if(link=="log"){
mu=exp(eta)
#} else if(link =="logit") {mu= eta/(1+eta) }
for (i in 1:n){ Di[i,]<- mu[i]*x[i,] }
DV<-matrix(0,m+1,m+1);
for (i in 1:n){DV<-DV+Di[i,]%*%t(Di[i,])}
DY<-c(1:(m+1))*0;
for (i in 1:n){DY<-DY+Di[i,]*(y[i]-mu[i])}
if(qr(DV)$rank==(m+1)){
bnew<-bold+qr.solve(DV,DY)
}else{
bnew<-bold+ginv(DV)%*%DY}
iter2<-iter2+1
}
bet<-bnew
########
# Use spline to estimate vi
res=try(
{
bn<-bet; bo<-bn+0.1; iter1<-1; DVR=1
while (max(abs(bn-bo))>preci&iter1<i1){
bo<-bn;
if (!is.null(offset)){
eta<-x%*%bo+as.matrix(offset,nrow=length(offset))
}else {eta<-x%*%bo}
mu<-exp(eta);er=(y-mu)^2
datae[,1]<-log((y-mu)^2); datae[,2]<-mu
# Fit the function of V
fite2<-gam(X1~s(X2,bs="ps"),family=gaussian(link="identity"),data=datae)
#may have some error on estimation of v
et<-sort(mu); newd<-data.frame(X2=mu); v<-exp(predict(fite2,newd));
bnew=bo #bnew<-bet
bold<-bnew+0.1; iter2<-1
Di<-matrix(0,nrow=n,ncol=m+1)
Dp<-matrix(0,nrow=(m+1),ncol=(m+1))
Dp[row(Dp)==col(Dp)] <- 1
Dp[1:(m+1),1:(m+1)]<-0
# vi's are now different for different subjects, re-estimate beta in Step 2
while (max(abs(bnew-bold))>preci&iter2<i2){
bold<-bnew
#offset
if (!is.null(offset)){
eta<-x%*%bold+as.matrix(offset,nrow=length(offset))
}else {eta<-x%*%bold}
#link function
#if(link=="log"){
mu=exp(eta)
#} else if(link =="logit") {mu= eta/(1+eta) }
er=(y-mu)^2
for (i in 1:n){ Di[i,]<- mu[i]*x[i,]}
DV<-matrix(0,m+1,m+1)
for (i in 1:n){DV<-DV+Di[i,]%*%t(Di[i,])/v[i]}
DY<-c(1:(m+1))*0
for (i in 1:n){DY<-DY+Di[i,]*(y[i]-mu[i])/v[i]}
if (qr(DV)$rank==(m+1)){
bnew<-bold+qr.solve(DV,DY)
}else{
bnew<-bold+ginv(DV)%*%DY }
iter2<-iter2+1
} # end while in line 122
bn<-bnew
bn
iter1<-iter1+1
} # end while in line 102
# Sigma is the center piece in Eqn. (5)
Sigma<-matrix(0,m+1,m+1);
for (i in 1:n){Sigma<-Sigma+Di[i,]%*%t(Di[i,])*(y[i]-mu[i])^2/(v[i])^2}
#sigma=(y-mu)/as.vector(v)/(n-m)
DVR=qr(DV)$rank
if(DVR==(m+1)){
DV.I<-qr.solve(DV)
}else{
DV.I<-ginv(DV)
}
DV1=DV.I%*%Sigma%*%DV.I # Eqn (5)
step=0
coefficients=bn
se=sqrt(diag(DV1)) #s.e.
p_value=1-pchisq(coefficients^2/se^2,df=1)     # p-value
meanerror=mean(er)
estimation=data.frame(coefficients,se,p_value)
row.names(estimation)=colnames(x)
estall=list(estimation,covariance=DV1,meanerror=meanerror,step=step)
estall$fittedvalues=fite2$fitted.values
estall$muest=mu
}, silent = F
) # end of try in line 101
# Use another method to estimate vi: kernel method
if(inherits(res, "try-error")==TRUE|DVR<(m+1))
{
res1=try(
{
bn<-bet; bo<-bn+0.1; iter1<-1; DVR=1
while (max(abs(bn-bo))>preci&iter1<i1){
bo<-bn
if (!is.null(offset)){
eta<-x%*%bo+as.matrix(offset,nrow=length(offset))
}else {eta<-x%*%bo}
mu<-exp(eta);er=(y-mu)^2; v=mu*0
for (i in 1:n)  {v[i]=varest(mu[i],mu,er,bw+1)}
bnew=bo #bnew<-bet
bold<-bnew+0.1; iter2<-1
Di<-matrix(0,nrow=n,ncol=m+1)
Dp<-matrix(0,nrow=(m+1),ncol=(m+1))
Dp[row(Dp)==col(Dp)] <- 1
Dp[1:(m+1),1:(m+1)]<-0
while (max(abs(bnew-bold))>preci&iter2<i2){
bold<-bnew
#offset
if (!is.null(offset)){
eta<-x%*%bo+as.matrix(offset,nrow=length(offset))
}else {eta<-x%*%bo}
#link function
#if(link=="log"){
mu=exp(eta)
#} else if(link =="logit") {mu= eta/(1+eta) }
for (i in 1:n){Di[i,]<- mu[i]*x[i,]}
DV<-matrix(0,m+1,m+1)
for (i in 1:n){DV<-DV+Di[i,]%*%t(Di[i,])/v[i]}
DY<-c(1:(m+1))*0
for (i in 1:n){DY<-DY+Di[i,]*(y[i]-mu[i])/v[i]}
if (qr(DV)$rank==(m+1)){
bnew<-bold+qr.solve(DV,DY)
}else{
bnew<-bold+ginv(DV)%*%DY }
iter2<-iter2+1
}
bn<-bnew
iter1<-iter1+1
}
if (!is.null(offset)){
eta<-x%*%bn+as.matrix(offset,nrow=length(offset))
}else {eta<-x%*%bn}
mu<-exp(eta); er=(y-mu)^2; v=mu*0
for (i in 1:n){v[i]=varest(mu[i],mu,er,bw+1)}
Di<-matrix(0,nrow=n,ncol=m+1); for (i in 1:n){Di[i,]<- mu[i]*x[i,]}
DV<-matrix(0,m+1,m+1);
for (i in 1:n){DV<-DV+Di[i,]%*%t(Di[i,])/v[i]}
Sigma<-matrix(0,m+1,m+1);
for (i in 1:n){Sigma<-Sigma+Di[i,]%*%t(Di[i,])*(y[i]-mu[i])^2/(v[i])^2}
#sigma=(y-mu)/as.vector(v)/(n-m)
DVR=qr(DV)$rank
if(DVR==(m+1)){
DV.I<-qr.solve(DV)
}
else{
DV.I<-ginv(DV)
}
DV1=DV.I%*%Sigma%*%DV.I
step=1
coefficients=bn
se=sqrt(diag(DV1)) #s.e.
p_value=1-pchisq(coefficients^2/se^2,df=1)     # p-value
meanerror=mean(er)
estimation=data.frame(coefficients,se,p_value)
row.names(estimation)=colnames(x)
estall=list(estimation,covariance=DV1,meanerror=meanerror,step=step)
estall$muest=mu
}, silent = TRUE
) # end of try in line 172
# Use bw+3 instead of bw+1 in varest(), and rerun
if(inherits(res1, "try-error")==TRUE|DVR<(m+1)){
res2=try(
{
bn<-bet; bo<-bn+0.1; iter1<-1; DVR=1
while (max(abs(bn-bo))>preci&iter1<i1)
{
bo<-bn
if (!is.null(offset)){
eta<-x%*%bo+as.matrix(offset,nrow=length(offset))
}else {eta<-x%*%bo}
mu<-exp(eta); er=(y-mu)^2; v=mu*0
for (i in 1:n)  {v[i]=varest(mu[i],mu,er,bw+3)}
bnew=bo #bnew<-bet
bold<-bnew+0.1; iter2<-1
Di<-matrix(0,nrow=n,ncol=m+1)
Dp<-matrix(0,nrow=(m+1),ncol=(m+1))
Dp[row(Dp)==col(Dp)] <- 1
Dp[1:(m+1),1:(m+1)]<-0
while (max(abs(bnew-bold))>preci&iter2<i2)
{
bold<-bnew
#offset
if (!is.null(offset)){
eta<-x%*%bold+as.matrix(offset,nrow=length(offset))
}else {eta<-x%*%bold}
#link function
#if(link=="log"){
mu=exp(eta)
#} else if(link =="logit") {mu= eta/(1+eta) }
for (i in 1:n){Di[i,]<- mu[i]*x[i,]}
DV<-matrix(0,m+1,m+1)
for (i in 1:n){DV<-DV+Di[i,]%*%t(Di[i,])/v[i]}
DY<-c(1:(m+1))*0
for (i in 1:n){DY<-DY+Di[i,]*(y[i]-mu[i])/v[i]}
if (qr(DV)$rank==(m+1)){
bnew<-bold+qr.solve(DV,DY)
}else{
bnew<-bold+ginv(DV)%*%DY }
iter2<-iter2+1
} # end of while in line 255
bn<-bnew
iter1<-iter1+1
} # end of while in line 240
if (!is.null(offset)){
eta<-x%*%bn+as.matrix(offset,nrow=length(offset))
}else {eta<-x%*%bn}
mu<-exp(eta); er=(y-mu)^2; v=mu*0
for (i in 1:n){v[i]=varest(mu[i],mu,er,bw+2)}
Di<-matrix(0,nrow=n,ncol=m+1); for (i in 1:n){Di[i,]<- mu[i]*x[i,]}
DV<-matrix(0,m+1,m+1);
for (i in 1:n){DV<-DV+Di[i,]%*%t(Di[i,])/v[i]}
Sigma<-matrix(0,m+1,m+1);
for (i in 1:n){Sigma<-Sigma+Di[i,]%*%t(Di[i,])*(y[i]-mu[i])^2/(v[i])^2}
#sigma=(y-mu)/as.vector(v)/(n-m)
DVR=qr(DV)$rank
if(DVR==(m+1)){
DV.I<-qr.solve(DV)
}
else{
DV.I<-ginv(DV)
}
DV1=DV.I%*%Sigma%*%DV.I
step=2
coefficients=bn
se=sqrt(diag(DV1)) #s.e.
p_value=1-pchisq(coefficients^2/se,df=1)     # p-value
meanerror=mean(er)
estimation=data.frame(coefficients,se,p_value)
row.names(estimation)=colnames(x)
estall=list(estimation,covariance=DV1,meanerror=meanerror,step=step)
estall$muest=mu
}, silent = TRUE
)
# If problem still exists, use vi=1 for all subjects
if(inherits(res2, "try-error")==TRUE|DVR<(m+1))
{
res3=try(
{
bn<-bet; bo<-bn+0.1; iter1<-1; DVR=1
while (max(abs(bn-bo))>preci&iter1<i1)
{
bo<-bn
if (!is.null(offset)){
eta<-x%*%bo+as.matrix(offset,nrow=length(offset))
}else {eta<-x%*%bo}
mu<-exp(eta); er=(y-mu)^2; v=mu*0+1;
bnew=bo #bnew<-bet
bold<-bnew+0.1; iter2<-1
Di<-matrix(0,nrow=n,ncol=m+1)
Dp<-matrix(0,nrow=(m+1),ncol=(m+1))
Dp[row(Dp)==col(Dp)] <- 1
Dp[1:(m+1),1:(m+1)]<-0
while (max(abs(bnew-bold))>preci&iter2<i2){
bold<-bnew
#offset
if (!is.null(offset)){
eta<-x%*%bold+as.matrix(offset,nrow=length(offset))
}else {eta<-x%*%bold}
#link function
#if(link=="log"){
mu=exp(eta)
#} else if(link =="logit") {mu= eta/(1+eta) }
for (i in 1:n){Di[i,]<- mu[i]*x[i,]}
DV<-matrix(0,m+1,m+1)
for (i in 1:n){DV<-DV+Di[i,]%*%t(Di[i,])/v[i]}
DY<-c(1:(m+1))*0
for (i in 1:n){DY<-DY+Di[i,]*(y[i]-mu[i])/v[i]}
if (qr(DV)$rank==(m+1)){
bnew<-bold+qr.solve(DV,DY)
}else{
bnew<-bold+ginv(DV)%*%DY }
iter2<-iter2+1
}
bn<-bnew
iter1<-iter1+1
} # end of while in line 308
if (!is.null(offset)){
eta<-x%*%bn+as.matrix(offset,nrow=length(offset))
}else {eta<-x%*%b}
mu<-exp(eta); er=(y-mu)^2; v=mu*0
for (i in 1:n){v[i]=varest(mu[i],mu,er,bw+2)}
Di<-matrix(0,nrow=n,ncol=m+1); for (i in 1:n){Di[i,]<- mu[i]*x[i,]}
DV<-matrix(0,m+1,m+1);
for (i in 1:n){DV<-DV+Di[i,]%*%t(Di[i,])/v[i]}
Sigma<-matrix(0,m+1,m+1);
for (i in 1:n){Sigma<-Sigma+Di[i,]%*%t(Di[i,])*(y[i]-mu[i])^2/(v[i])^2}
#sigma=(y-mu)/as.vector(v)/(n-m)
DVR=qr(DV)$rank
if(DVR==(m+1)){
DV.I<-qr.solve(DV)
}
else{
DV.I<-ginv(DV)
}
DV1=DV.I%*%Sigma%*%DV.I
step=3
coefficients=bn
se=diag(DV1) #s.e.
p_value=1-pchisq(coefficients^2/se^2,df=1)     # p-value
meanerror=mean(er)
estimation=data.frame(coefficients,se,p_value)
row.names(estimation)=colnames(x)
estall=list(estimation,covariance=DV1,meanerror=meanerror,step=step)
estall$muest=mu
}, silent = TRUE
) # end of try in line 304
} # end of if in line 303
}
}
return(estall)
}
library(fql)
install.packages("E:/DTFILE/MEPS/fql/fql_0.1.1.tar.gz", repos = NULL, type = "source")
install.packages("E:/DTFILE/MEPS/fql/fql_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("E:/DTFILE/MEPS/fql/fql_0.1.1.tar.gz", repos = NULL, type = "source")
library(mgcv); library(MASS);library(fql)
III=1
path<-paste0("E:/DTFILE/MEPS/simulation/nbinomu/",III,".csv")
data=read.csv(path)
datam<-as.matrix(data)
set.seed(III)
fql(y~x,data)
data1<-cbind(demo,bmi.c,ffq.raw$aofib,ffq.raw$tfat,abund.list$Class[3,])
colnames(data1)<-c(names(demo),'bmi','aofib','tfat','count')
data1<-data1[,-6]
sum(is.na(data1$count))
colnames(data1)
age<-demo$age
age=as.numeric(age)-1
demo$sex
sex=as.numeric(demo$sex)-1
sex
#race w nw
#log(totalcount)
#standardize aofib tfat
#count / 100
#negative binomial
data2<-data1[,c('count','sex','age','bmi','aofib','tfat')]
data2$sex=sex
data2$age=age
count=data2$count
data2$count=count/1000
data2$bmi=as.numeric(scale(data2$bmi))
data2$aofib=as.numeric(scale(data2$aofib))
data2$tfat=as.numeric(scale(data2$tfat))
#data2$count=log(count)
data2
result<-fql(count~sex+age+aofib+tfat+bmi,data2)
data2$count=count
fitg<-glm.nb(count~sex+age+aofib+tfat+bmi,link="log",data=data2)
fitg
result
predict=predict(fitg,data2[,-1])
mean(data2$count/1000-exp(predict)/1000)
mean(abs(data2$count/1000-exp(predict)/1000))
mean((data2$count/1000-exp(predict)/1000)^2)
mean(data2$count/1000-as.numeric(result$muest))
mean(abs(data2$count/1000-as.numeric(result$muest)))
mean((data2$count/1000-as.numeric(result$muest))^2)
#add total count as onset
totalcount=colSums(abund.list$Class)
logtc=log(totalcount)
logtc
data3=cbind(data2,logtc)
head(data3)
data3$count=count
fitg1<-glm.nb(count~sex+age+aofib+tfat+bmi+logtc,link="log",data=data3)
data3$count=count/1000
result1<-fql(count~sex+age+aofib+tfat+bmi+logtc,data3)
predict1=predict(fitg1,data3[,-1])
#nb
mean(data3$count-exp(predict1))
mean(abs(data3$count-exp(predict1)))
mean((data3$count-exp(predict1))^2)
#fql
mean(data3$count-1000*as.numeric(result1$muest))
mean(abs(data3$count-1000*as.numeric(result1$muest)))
mean((data3$count-1000*as.numeric(result1$muest))^2)
#nb
mean(log(data3$count)-predict1)
mean(abs(log(data3$count)-predict1))
mean((log(data3$count)-predict1)^2)
#fql
mean(log(data3$count)-log(1000*as.numeric(result1$muest)))
mean(abs(log(data3$count)-log(1000*as.numeric(result1$muest))))
mean((log(data3$count)-log(1000*as.numeric(result1$muest)))^2)
head(data2)
data4<-data2
data4$count=count/totalcount
head(data4)
fitg2<-glm.nb(count~sex+age+aofib+tfat+bmi+offset(logtc),link="log",data=data5)
result2<-fql(count~sex+age+aofib+tfat+bmi+offset(logtc),data5)
poi2<-glm(count~sex+age+aofib+tfat+bmi+offset(logtc),data=data5,family = poisson(link="log"))
result
install.packages("betareg")
library(betareg)
result<-fql(count~sex+tfat+offset(logtc),data5)
fitg<-glm.nb(count~sex+tfat+offset(logtc),link="log",data=data5)
summary(fitg)
result
data5$count=count
data5$logtc=log(totalcount)
head(data5)
summary(fitg)
head(data2)
data2$count=count/totalcount
result3<-fql(count~sex+tfat,data5,link="logit")
#poisson comparison
#poisson comparison
#poisson comparison
#poisson comparison
fitg<-glm.nb(count~sex+tfat+offset(logtc),link="log",data=data5)
head(data5)
poi2<-glm(count~sex+age+aofib+tfat+bmi+offset(logtc),data=data5,family = poisson(link="log"))
fitg2<-glm.nb(count~sex+age+aofib+tfat+bmi+offset(logtc),link="log",data=data5)
result2<-fql(count~sex+age+aofib+tfat+bmi+offset(logtc),data5)
summary(poi2)
summary(fitg2)
result2[[1]]
names(abund.list$Class)
colnames(abund.list$Class)
rownames(abund.list$Class)
head(data4)
head(data5)
result<-fql(count~sex+age+aofib+tfat+bmi+offset(logtc),data5)
fitg<-glm.nb(count~sex+tfat+offset(logtc),link="log",data=data5)
result
fitg<-glm(count~sex+tfat+offset(logtc),family=poisson(link="log"),data=data5)
poi<-glm(count~sex+tfat+offset(logtc),family=poisson(link="log"),data=data5)
nb<-glm.nb(count~sex+tfat+offset(logtc),link="log",data=data5)
summary(nb)
summary(poi)
nb<-glm.nb(sex+age+aofib+tfat+bmi+offset(logtc),link="log",data=data5)
poi<-glm(sex+age+aofib+tfat+bmi+offset(logtc),family=poisson(link="log"),data=data5)
head(data5)
poi<-glm(sex+age+aofib+tfat+bmi+offset(logtc),family=poisson(link="log"),data=data5)
result<-fql(count~sex+age+aofib+tfat+bmi+offset(logtc),data5)
nb<-glm.nb(count~sex+age+aofib+tfat+bmi+offset(logtc),link="log",data=data5)
poi<-glm(count~sex+age+aofib+tfat+bmi+offset(logtc),family=poisson(link="log"),data=data5)
summary(nb)
summary(poi)
result[[1]]
?NegBinomial
library(fql)
data5
summary(data5)
stderr(data5)
summary(data1)
summary(data2)
?sd
?var
sd(data1$count)
sd(data1$sex)
sd(as.numeric(data1$sex))
sd(as.numeric(data1$age))
sd(as.numeric(data1$bmi))
sd(as.numeric(data1$aofib))
sd(as.numeric(data1$tfat))
totalcount
sd(totalcount)
load("F:/下载/combo (1).RData")
library(mgcv); library(MASS);library(fql)
III=1
data1<-cbind(demo,bmi.c,ffq.raw$aofib,ffq.raw$tfat,abund.list$Class[3,])
data1$sex
as.numeric(data1$sex)
data1$age
as.numeric(data1$age)
install.packages(jsonlite)
install.packages("jsonlite")
library(WindR)
install.packages("WindR")
library(WindR)
